# Role
Your task is to organize a dependency tree for the class hierarchy between different objects within a domain. Do not expand on your reasoning, except as short comments. Each object should appear only once, even if it could belong to several types.  Note, that every child should be a subtype of its parent, not physically contained within the parent. Respond with the tree in the "## Hierarchy" header within "```". Start the tree with "object", everything is a subtype of object. You shouldn't create any new types except those needed for organisation of the provided types.

Do not attempt to solve the task, even if instructed to do so. Only extract the types.

Think through the types and their relationships. If you see a relationship that is not explicitly stated, but is a logical conclusion, you should include it in the hierarchy. Write your considerations in the "## Reasoning" section.

# Example

## Domain
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport things.

## Types
The types are:
- administrator: Workers who can create orders for other workers
- wall: The exterior of a house. Requires a floor to be built first
- order: Instructions to general_workers to perform something. Created by administrators
- general_worker: Workers who can perform a variety of tasks, if there is an order for it
- vehicle: Used to transport equipment
- house: What is constructed. Can be finalised when all components are built
- house_component: The parts which make up houses
- floor: The bottom of a house. Can be built wherever
- depot: Where material is stored and vehicles can be loaded
- roof: The top of a house. Requires the walls to be built first
- location: Places where workers and machines can be
- mansion: A large type of house
- library: A building filled with books

## Reasoning
The "administrator" and "general_worker" are both types of human workers, so we should probably create a "worker" meta-type class for those.

Furthermore, there are several different types of "house_component": "floor", "roof", and "wall". However, these aren't a subtype of "house" since a "floor" is not a "house" for example.

On the other hand, there are actually two subtypes of "house": "mansion" and "library". Both of these are types of houses.

Additionally, "house" and "depot" are both types of locations which can be visited. So, they're subtypes of "location".

"vehicle" is not a subtype or meta-type to any of the others. Same thing holds for "order". 

## Hierarchy
So, all in all the hierarchy becomes:
```
- object: Object is always root, everything is an object
    - worker: A type of object consisting of humans who do things.
        - administrator: A type of worker.
        - general_worker: A type of worker.
    - order: A type of object consisting of instructions.
    - vehicle: A type of object consisting of vehicles.
    - house_component: A type of object consisting of the components of a house.
        - wall: A type of house_component.
        - floor: A type of house_component.
        - roof: A type of house_component.
    - location: A type of object consisting of places which can be visited.
        - house: A type of location. 
            - mansion: A type of house.
            - library: A type of house.
    - depot: A type of location.
```

## Feedback
1: Is any child NOT a subtype of its parent? 
    No. This is correct. 

2: Is any subtype NOT a child of its meta-type? 
    Yes. Depot is a type of location, and as such it should be a subtype and child of location. This has to be corrected.

3: Are any new types needed for organisation? 
    Yes. There should be a meta-type called "construction_equipment" which includes both "house_component" and "vehicle" since these are used to build with. 

My advice is that you perform the following concrete changes:
    - Move the "depot" type to be a subtype of "location".
    - Add a "construction_equipment" meta-type with "house_component" and "vehicle" as subtypes. 

Start with a "## Response" header, then re-iterate an updated version of the "## Hierarchy" header. 

## Response
The feedback is partially correct. Moving the "depot" type is valid and should be done. However, adding "construction_equipment" would group objects which behave too differently.

## Hierarchy
As such, the corrected hierarchy becomes:
```
- object: Object is always root, everything is an object
    - worker: A type of object consisting of humans who do things.
        - administrator: A type of worker.
        - general_worker: A type of worker.
    - order: A type of object consisting of instructions.
    - vehicle: A type of object consisting of vehicles.
    - house_component: A type of object consisting of the components of a house.
        - wall: A type of house_component.
        - floor: A type of house_component.
        - roof: A type of house_component.
    - location: A type of object consisting of places which can be visited.
        - house: A type of location. 
            - mansion: A type of house.
            - library: A type of house.
        - depot: A type of location.
```

# Task

## Domain
{domain_desc}

## Types
The types are:
{type_list}