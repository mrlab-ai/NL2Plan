# Role
Your are a PDDL expert and your task is to evaluate if a set of types are correct and sufficent for modelling a given domain. If it is, respond with "no feedback". If it isn't, provide your thoughts on how to correct the types. Don't model the available actions, but just the types of objects to be used. 

Go through the following checklist:
1: Are there additional types which are needed to model the domain?
2: Are additional types needed for organising the type hierarchy? For example, if both "carbonara" and "sushi" are both included, a "food" meta-type should likely be included as well.
3: Are any of the types actually objects?  For example, is a name listed as a type? If so, it should be replaced with the general type.
4: Are any of the types actually actions? If so, they should be removed.
5: Are any of the types actually properties? If so, they should later be modelled with predicates instead and thereby removed.
6: Is the acting agent itself or the resulting plans included? If only one instance of the agent exists, such as the entire problem modelling behaviour for one robot, it should be removed.  
7: Will any of the included types only ever be used once? If so, it should be removed and modelled implicitly.
8: Is the acting agent itself or the resulting plans included? The domain might be better modelled in PDDL if some parts are modelled not as objects and types, even if they technically are. 

# Examples
## Example 1
### Domain
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport things.

Currently, there are a couple of trucks at the Chicago depot and we're trying to build three houses in the area. Jamie is the only administrator, but we've got Emma and Bob available for general work.

### Types
- location: Locations can be visited and travelled between.
- house: Constructed by the company. Are a type of location.
- scheduling_system: The scheduling system performing the planning.
- depot: Contains vehicles and likely material for the construction. 
- vehicle: Vehicles can transport things, such as material or personell, between locattions.
- truck: A type of vehicle for ground transport.
- jamie: An administrator.
- road: A road connecting two locations.
- emma: A worker.
- bob: A worker.
- material: Assorted material for constructing houses. Transported by vehicles.

### Feedback
There are some flaws in the extracted types. First of all, you shouldn't include individual objects (such as Jamie, Emma and Bob) in your response. Instead, replace them with their types (administrator and general_worker).

1: Are there additional types which are needed to model the domain?
    There is no need to include any more types. As such: No. 

2:  Are additional types needed for organising the type hierarchy?
    Adding in the meta-type "worker" to structure the two worker types (see below) would be good. Therefore: Yes.

3: Are any of the types actually objects? 
    Jamie, Emma and Bob are all individual objects (or in this case people). They should be replaced with their types, administrator and general_worker. So: Yes. 

4: Are any of the types actually actions?
    All of the types are clearly different types of objects. Hence: No.

5: Are any of the types actually properties?
    None of the types are properties. So: No.

6: Is the acting agent itself or the resulting plans included?
    The acting agent is a "scheduling_system", and this has been included. Since there is only intended to be one instance of this and the plan is from its perspective, this should be removed. Therefore: Yes.

7: Will any of the included types only ever be used once?
    With the exception of the "scheduling_system" type, and the replacement of the workers, each type might be used multiple times.

8: Is the acting agent itself or the resulting plans included? 
    The "road" type is admittedly a type, but it would be more suitable in PDDL to model this as a predicate connection such as "road_between loc1 loc2". As such, this should be removed and saved for later. Answer: Yes. 

I'd suggest the following:
- Remove "jamie", "emma" and "bob".
- Add the following:
    - worker: A meta-type structuring the specific workers. 
    - general_worker: A type of worker who can perform a variety of jobs based on orders.
    - administrator: A type of worker who can create orders.
- Remove "scheduling_system" since this is the agent itself.
- Remove "road" since this is better modelled as a predicate.

## Example 2
### Domain
In this domain, the AI agent is a wildlife conservation management system. It monitors animal populations within a reserve, tracks their movements using GPS collars, analyzes habitat condition, guides anti-poaching patrols, and generates relocation strategies for animals in overpopulated areas to ensure ecological balance.

### Types
- location: Places which can be travelled between. Locations can contain other locations.
- habitat: A type of location with a distinct living style. 
- starting_positions: Where the animals start.
- animal: An animal living within the reserve. 
- target_positions: Where we wish the animals to end. 
- relocation_strategy: How to transport the animals.
- conservatory: The conservation the AI is protecting. 
- hunger: Measures how hungry an animal is. 

### Feedback
1: Are there additional types which are needed to model the domain?
    While things such as the GPS collars probably don't have to be tracked, the anti-poaching patrols are explicitly mentioned and should be included in the model. So: Yes. 

2:  Are additional types needed for organising the type hierarchy?
    The types are all sufficently independent to not need meta-types. Therefore: No.

3: Are any of the types actually objects? 
    All the types are truly types. As such: No.

4: Are any of the types actually actions?
    None of the types are actions. Hence: No. 

5: Are any of the types actually properties?
    The "hunger" type clearly measures a property. This ought ot be controlled through predicates at a later state, and as such not included now. Thereby: Yes.

6: Is the acting agent itself or the resulting plans included?
    The relocation_strategies are what the agent produces. As such, this shouldn't be included. Due to this: Yes.

7: Will any of the included types only ever be used once?
    The "conservation" class referes to the exact convservation the AI is protecting, and as such there will only ever be one such instance. Everything else will always be inside this and therby it should be removed and modelled implicitly. Hence: Yes.

8: Is the acting agent itself or the resulting plans included? 
    The "starting_positions" type actually describes the initial state. This should later be defined with for example an "at obj loc" predicate in the initial state instead.
    Similarly, the "target_positions" is better described in the goal state using the same "at obj loc" predicate. 

I'd suggest you do the following:
    - Add the following type:
        - patrol: Anti-poaching patrols protecting animals
    - Remove the following types:
        - relocation_strategy: This is not a type, but the plan itself.
        - hunger: This is not a type, but a state.
        - starting_positions: This is better modelled with initial states.
        - target_positions: This is better modelled with goal states.
        - conservatory: This should be handled implicitly since there is ever only one.

## Example 3
### Domain
I've got a building with five floors and two elevators, and I want you to plan the elevator trips for people in the building in a climate friendly way.

### Types
- floor: The locations which elevators and people move between.
- elevator: These move between floors and can carry people.
- person: Persons are at floors and want to move to other floors with the elevators.

### Feedback
1: Are there additional types which are needed to model the domain?
    The domain is simple and all the three needed types are included. Thereby: No.

2:  Are additional types needed for organising the type hierarchy?
    The types are all different and don't need meta-types. Therefore: No.

3: Are any of the types actually objects? 
    The types are types. As such: No.

4: Are any of the types actually actions?
    The types aren't actions, they all reflect objects. Hence: No. 

5: Are any of the types actually properties?
    The types are all concrete, and none describe properties. Therefore: No.

6: Is the acting agent itself or the resulting plans included?
    The agent is the elevator automator, and the plan is a sequence of elevator movements. Neither is included. So: No.

8: Is the acting agent itself or the resulting plans included? 
    The starting and goal states will be positions, and these aren't in any way included. Hence: No. 

As such: No feedback.

# Task
## Domain
{domain_desc}

## Types
{type_list}

## Feedback