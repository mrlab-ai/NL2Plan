# Role
You will be given a set of which are used for a PDDL domain. You should evaluate if they make up all the actions necessary for the given domain, or if any new actions have to be created or existing actions removed. Describe your thought process and comments your suggestions. Focus only on the actions currently, predicates will be specified at a later date. Be careful not to over complicate any domains, adding actions simply for complexity/completeness when they're not needed for the domain should be avoided, we're making a simplified model. Keep the essentials. If the actions are well defined, simply respond with "No feedback".

Go through the following checklist:
1: Are there additional actions needed for this domain? Some actions might be hard to spot, such as needing an action to validate a partial result before moving on.
2: Should any of the actions be split or combined? To model actions in PDDL its sometimes required to split it into three parts, one which initiates the action, one which performs a part of the action and is usually repeated, and lastly an action ending the action.
3: Should any of the actions be removed? For example, actions which model irrelevant details.
4: Should any preconditions be changed? For example, are any preconditions such as object states or action ordering missing? Are any unnecessary preconditions included?
5: Should any effects be changed? For example, is some effect forgotten? Is any any incorrect effect included?
6: Should any action examples be modified? Are they currently unclear or missing objects?

# Examples
## Example 1
### Domain
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport things. Houses are modelled as having floor, wall and roof which have to be built in this order.

Currently, there are a couple of trucks at the Chicago depot and we're trying to build three houses in the area. Jamie is the only administrator, but we've got Emma and Bob available for general work. 

### Types 
- object: Everything is an object
    - worker: Human workers which do things
        - administrator: Workers who can create orders for other workers
        - general_worker: Workers who can perform a variety of tasks, if there is an order for it
    - order: Instructions to general_workers to perform something. Created by administrators
    - vehicle: Used to transport workers.
    - location: Places where workers and machines can be
        - house: What is constructed. Can be finalised when all components are built

### Actions
- create_order: An administrator can create new orders. Example: administrator_1 creates a build_floor order. 
- build_floor: A worker performs an order to build a floor in a house. The worker has to be at the house's location and a build_floor_order for the house has to be available. Example: worker_1 builds a floor at house_1.
- build_wall: A worker performs an order to build a wall in a house. The worker has to be at the house's location and a build_wall_order for the house has to be available. Example: worker_2 builds a wall at house_2.
- build_roof: A worker performs an order to build a roof in a house. The worker has to be at the house's location and a build_roof_order for the house has to be available. Example: worker_3 builds a roof at house_3.
- move_vehicle: A vehicle moves from point A to point B. Example: truck_1 moves from house_1. 
- finalise_house: The house is finalised (walls painted, interior prepared and so on). Requires all the house_components (floor, wall and roof) to be built there already, a worker to be there and a finalize_order to be available for the house. Example: house_4 is finalised by worker_4.

### Feedback
1: Are there additional actions needed for this domain?
    For the vehicles to be able to transport workers we need to add actions to allow workers to step on and off the vehicles, "enter_vehicle" and "exit_vehicle". Definitions are given below. Therefore: Yes. 

2: Should any of the actions be split or combined?
    In PDDL it's not functional to have a single "create_order" action for all parts of the house (floor, walls, roof and finalisation). The results of applying the action have to be simple, so we'll split it into "order_floor" and so on. Hence: Yes.

3: Should any of the actions be removed?
    All the actions provided are needed for the domain (with the exception of "create_order" as detailed above). As such: No. 

4: Should any preconditions be changed?
    The preconditions are all valid. So: No.

5: Should any effects be changed?
    All the effects are reasonable. Thereby: No.

6: Should any action examples be modified?
    In the "move_vehicle" action, the example only illustrates where the vehicle is movin from. It should also include where it is moving to. Hence: Yes.

My concrete suggestions are the following:
    - Add the following two vehicle-related actions:
        - enter_vehicle: A worker enters a vehicle while at the vehicle's location. Example: worker_7 enters truck_4 at house_6.
        - exit_vehicle: A worker exits a vehicle at the vehicle's location. Example: worker_8 exits truck_5 at house_7.
    - Remove the "create_order" action.
    - Replace the "create_order" action with the following four actions:
        - create_floor_order: An administrator creates an order to build a floor at a house. The administrator doesn't have to be there. Example: administrator_2 creates an order the floor at house_8.
        - create_wall_order: An administrator creates an order to build walls at a house. The administrator doesn't have to be there. Example: administrator_3 creates an order to build walls at house_9.
        - create_roof_order: An administrator creates an order to build a roof at a house. The administrator doesn't have to be there. Example: administrator_4 creates an order to build roofs at house_10.
        - create_finalize_order: An administrator creates an order to finalize a house. The administrator doesn't have to be there. Example: administrator_5 creates an order to finalizes house_11.
    - Change the example for "move_vehicle" to: "truck_1 moves from house_1 to depot 1"

## Example 2
### Domain
In this domain, the AI agent is a wildlife conservation management system. It monitors animal populations within a reserve, tracks their movements using GPS collars, guides anti-poaching patrols, and generates relocation strategies for animals in overpopulated areas to ensure ecological balance.

### Types
- object: Object is always root, everything is an object
    - location: Places which can be travelled between.
        - habitat: Habitats are a type of location.
    - animal: The animals living in the park.
    - ranger: A worker protecting the animals.

### Actions
- move_animal: An animal is made to move. Requires a ranger to accompany it. Example: ranger_1 moves deer_1 from hill_1 to plain_1.
- move_ranger: A ranger moves from one location to another. The rangers can move to anywhere from anywhere. Example: ranger_2 moves.
- generate_relocation_strategy: Generates a relocation strategy to move an animal to another location. Example: Plans for moving rabbit_1 from hill_2 to forest_1.
- guard_location: A ranger guards a location from poachers. Example: ranger_3 guards plain_2.

### Feedbacks
1: Are there additional actions needed for this domain?
    The domain is focused on planning movement for the animals and rangers, and protecting from poachers. The actions model this correctly. Thereby: No.

2: Should any of the actions be split or combined?
    The actions are all simple enough to be performed as is. Possibly the "move_animal" and "move_ranger" actions could have been combined, but since they have different requirements this shouldn't be done. So: No.

3: Should any of the actions be removed?
    The "generate_relocation_strategy" action should not be kept. The movement of animals is dealt with by the simpler and more adequate "move_animal" action. The entire output from the system is a relocation strategy, so this should not be a single step. As such: Yes.

4: Should any preconditions be changed?
    The "guard_location" action forgets to mention that the guard has to be at said location. Due to this: Yes.

5: Should any effects be changed?
    The description of "move_animal" doesn't clarify that the animal is moving from a location to a location. This should be added. Hence: Yes.

6: Should any action examples be modified?
    The examples are all good. Therefore: No.

I'd advice you change the following:
    - Remove the "generate_relocation_strategy" action.
    - Change the description of the following:
        - guard_location: A ranger guards a location from poachers. The ranger has to be at the location. Example: ranger_3 guards plain_2.
        - move_animal: An animal is made to move from a location to another. Requires a ranger to accompany it. Example: ranger_1 moves deer_1 from hill_1 to plain_1.

## Example 3
### Domain
I've got a building with five floors and two elevators, and I want you to plan the elevator trips for people in the building in a climate friendly way.

### Types
- object: Object is always root, everything is an object
    - floor: The locations which elevators and people move between.
    - elevator: These move between floors and can carry people.
    - person: Persons are at floors and want to move to other floors with the elevators.

### Actions
- pick_up: An elevator picks up a person at a floor where they both are. Example: elevator_1 picks up person_1 at floor_1.
- drop_off: An elevator drops of a person at a the floor where the elevator is. Example: elevator_2 drops of person_2 at floor_2.

### Feedback
1: Are there additional actions needed for this domain?
    The domain is focused on transportation with elevators, and the two actions are sufficent for this. So: No.

2: Should any of the actions be split or combined?
    The actions are all simple enough to be performed in a single step and the actions clearly cannot be combined. Thereby: No.

3: Should any of the actions be removed?
    Both actions are needed since people have to be able to both enter and exit the elevator. Hence: No.

4: Should any preconditions be changed?
    The constraints are all clear, no need to change them. Therefore: No.

5: Should any effects be changed?
    The effects are all provided well. So: No.

6: Should any action examples be modified?
    All examples involve the relevant objects and clearly specify what happens. Thereby: No.

As such: No feedback.

# Task

## Domain
{domain_desc}

## Available Types
{type_hierarchy}

## Actions
{actions}

### Feedback