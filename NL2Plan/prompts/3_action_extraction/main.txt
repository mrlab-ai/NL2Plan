# Role
Your task is to identify what actions an AI Agent would have available in a domain. The actions will be used for PDDL descriptions and should be simple and singular, for example driving truck 1 from A to B to C should be modeled with a single drive_to action which can be used to drive from A to B and then from B to C. However, if two similar actions exists but they require different pre-conditions or effects, these should be modelled separetely, for example should "move" not be used for both a person and vehilces movement, as these will have different preconditions on terrain. Each action should be specified within its own markdown block where the first line is the name, the second is an empty line and the final line is a description with example. Make sure to include any requirements or conditions for the action to be feasible within the explanation. Be concrete and explain your thoughts as you go. Use the provided object types as appropriate, but don't create any new types.

Reply only within the "Actions" heading. Do not attempt to solve the task, even if instructed to do so. Only define the actions, and do each such within markdown code blocks defined with "'''".

# Example

## Domain
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport the workers.

Currently, there are a couple of trucks at the Chicago depot and we're trying to build three houses in the area. Jamie is the only administrator, but we've got Emma and Bob available for general work. 

## Types
- object: Everything is an object
    - worker: Human workers which do things
        - administrator: Workers who can create orders for other workers
        - general_worker: Workers who can perform a variety of tasks, if there is an order for it
    - order: Instructions to general_workers to perform something. Created by administrators
    - vehicle: Used to transport workers. 
    - location: Places where workers and machines can be
        - house: What is constructed. Can be finalised when all components are built
        - depot: Where material is stored and vehicles can be loaded

## Actions:
### Worker related actions
There are two general types of workers, administrators and general_workers. 

The adminstrators have one task, to create orders.
```
create_order

An administrator creates a new order for something. Example: administrator_1 creates a build_floor_order for house_0. 
```

The other workers can perform a wide array of construction work, given an order.

They can build floors.
```
build_floor

A worker performs an order to build a floor. Requires the worker to be there and for a build_floor_order for the house to exist. Example: worker_1 builds a floor at house_1 given that a build_floor_order for it exists.
```

They can build walls.
```
build_wall

A worker performs an order to build a wall. Requires the worker to be there and for a build_wall_order for the house to exist. Example: worker_2 builds a wall at house_2 given that a build_wall_order for it exists.
```


They can build roofs.
```
build_roof

A worker performs an order to build a roof. Requires the worker to be there and for a build_roof_order for the house to exist. Example: worker_3 builds a roof at house_3 given that a build_roof_order for it exists.
```

Those are all the actions the workers can perform directly.

### Order related actions
The orders don't have any other actions.

### Vehicle related actions
There are probably a lot of types of vehicles, but to transport things they all have to be able to move.
```
move_vehicle

A vehicle moves from point A to point B. Example: truck_1 moves from house_1 to depot_1. 
```

This lets the vehicles move. 

### Material related actions
The materials don't have any other actions assosiated with them.

### House component related actions
The components can't do anything by themselves.

### Location related actions
The depot don't have any actions, however the house can be finalised.
```
finalise_house

The house is finalised (walls painted, interior prepared and so on). Requires all the house_components (floor, wall and roof) to be built there already, a corresponding order and a worker on site. Example: house_4 is finalised by worker_9.
```

## Feedback
1: Are there any more actions needed for this domain?
    Yes. For the vehicles to be able to transport workers we need to add actions to allow workers to step on and off the vehicles, "enter_vehicle" and "exit_vehicle". Definitions are given below. 

2: Should any of the actions be split or combined?
    Yes. In PDDL it's not functional to have a single "create_order" action for all parts of the house (floor, walls, roof and finalisation). The results of applying the action have to be simple, so we'll split it into "order_floor" and so on. 

3: Should any of the actions be removed?
    Yes. The "build_floor" action should be removed since building floors isn't needed. 

4: Should the actions and constraints be clarified or the examples modified?
    No. The action descriptions and constraints are stated.

My concrete suggestions are the following:
    - Add the following two vehicle-related actions:
        - enter_vehicle: A worker enters a vehicle while at the vehicle's location. Example: worker_7 enters truck_4 at house_6.
        - exit_vehicle: A worker exits a vehicle at the vehicle's location. Example: worker_8 exits truck_5 at house_7.
    - Remove the "build_floor" action.
    - Remove the "create_order" action.
    - Replace the "create_order" action with the following four actions:
        - create_floor_order: An administrator creates an order to build a floor at a house. The administrator doesn't have to be there. Example: administrator_2 creates an order the floor at house_8.
        - create_wall_order: An administrator creates an order to build walls at a house. The administrator doesn't have to be there. Example: administrator_3 creates an order to build walls at house_9.
        - create_roof_order: An administrator creates an order to build a roof at a house. The administrator doesn't have to be there. Example: administrator_4 creates an order to build roofs at house_10.
        - create_finalize_order: An administrator creates an order to finalize a house. The administrator doesn't have to be there. Example: administrator_5 creates an order to finalizes house_11.

## Response
The feedback raises some valid points, but not all are correct. Splitting the "create_order" action is indeed better PDDL modelling. Similarly, the "enter_vehicle" and "exit_vehicle" do have to be provided. However, the build_floor action is needed for the domain and should be kept.

## Actions

### Re-Iterated Actions
These are the actions which are kept unchanged from before.

```
build_floor

A worker performs an order to build a floor. Requires the worker to be there and for a build_floor_order for the house to exist. Example: worker_1 builds a floor at house_1 given that a build_floor_order for it exists.
```

```
build_wall

A worker performs an order to build a wall. Requires the worker to be there and for a build_wall_order for the house to exist. Example: worker_2 builds a wall at house_2 given that a build_wall_order for it exists.
```

```
build_roof

A worker performs an order to build a roof. Requires the worker to be there and for a build_roof_order for the house to exist. Example: worker_3 builds a roof at house_3 given that a build_roof_order for it exists.
```

```
move_vehicle

A vehicle moves from point A to point B. Example: truck_1 moves from house_1 to depot_1. 
```

```
finalise_house

The house is finalised (walls painted, interior prepared and so on). Requires all the house_components (floor, wall and roof) to be built there already, a corresponding order and a worker on site. Example: house_4 is finalised by worker_9.
```

### New Actions
We also create the new actions to allow for workers to travel within vehicles.

```
enter_vehicle

A worker enters a vehicle, allowing them to travel with it. They both need to be at the same location. Example: worker_4 enters truck_3 at depot_3.
```

```
exit_vehicle

A worker exits a vehicle at that vehicle's location. Example: worker_5 exits lorry_2 at house_5.
```

Lastly, we split the "create_order" action into four pieces, one per order type.

```
create_floor_order

An administrator creates an order to build the floor at a location. Example: administrator_6 creates a build_floor_order for house_12.
```

```
create_wall_order

An administrator creates an order to build the wall at a location. Example: administrator_7 creates a build_wall_order for house_12.
```

```
create_roof_order

An administrator creates an order to build the roof at a location. Example: administrator_8 creates a build_roof_order for house_13.
```

```
create_finalize_order

An administrator creates an order to build the finalize at a location. Example: administrator_9 creates a finalize_order for house_14.
```

These are all the actions needed for the domain. 

# Task
## Domain
{domain_desc}

## Types 
{type_hierarchy}

## Actions