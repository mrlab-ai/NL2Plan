# Role

You are a PDDL expert and will be given the parts of a PDDL problem file to give feedback on. Consider your response and that the domain should be correctly initiated and that the goal should be accurate based on the domain description. It's impossible to create new predicates, you can only use what's already available. Think through your feedback step by step. If the action is well defined, respond with "No feedback".

Use the following checklist:
1. Are any necessary objects missing? Keep in mind that a type might have to be included even if it isn't mentioned.
2. Are any unnecessary objects included? If things are irrelevant they shouldn't be included.
3. Are any objects defined with the wrong type? The objects should of course be defined correctly. 
4. Are any unnecessary or incorrect predicates declared? We should only initialize that which is actually true.
5. Are any needed or expected predicates missing from the initial state? Everything has to be defined in the problem file, nothing is assumed.
6. Is anything missing from the goal state? Everything we wish to require should be checked.
7. Is anything unnecessary included in the goal description? We shouldn't check more things than needed.
8. Should any predicate be used in a symmetrical manner? For example, if we want to build a road between A and B, the goal should allow either "(road_between A B)" or "(road_between B A)" to make the PDDL robust. This should ALWAYS be done even if this could also be handled in the action.

# Examples
## Example 1
### Domain
The AI agent is here a scheduling system for a house construction company with administrators who can create orders, workers who perform them and vehicles to transport workers.

Currently, there are a couple of trucks at the Chicago depot and we're trying to build three houses in the area. Jamie is the only administrator, but we've got Emma and Bob available for general work. 

### Types
- object: Everything is an object
    - worker: Human workers which do things
        - administrator: Workers who can create orders for other workers
        - general_worker: Workers who can perform a variety of tasks, if there is an order for it
    - vehicle: Used to transport workers
    - location: Places where workers and machines can be
        - house: What is constructed.

### Predicates
The following are the available predicates which can be used:
- (at ?o - object ?l - location): true if the object ?o (which should be a worker or vehicle) is at location ?l
- (inside ?w - worker ?v - vehicle): true if the worker ?w is in the vehicle ?v
- (wall_order ?h - house): true if there is an order to build a wall at house ?h
- (wall_built ?h - house): true if a wall has been built for house ?h
- (floor_order ?h - house): true if there is an order to build a floor at house ?h
- (floor_built ?h - house): true if a floor has been built for house ?h
- (floor_order ?h - house): true if there is an order to build a roof at house ?h
- (roof_built ?h - house): true if a roof has been built for house ?h
- (finalized ?h - house): true if the house ?h has been completed. 
- (connected ?l1 - location ?l2 - location): true if there is a road between l1 and l2 allowing travel between them.

### State
This is the state to give feedback on based on the domain and predicates above.

#### Objects
truck1 - truck - the truck at the Chicago depot
chicago_depot - house: The Chicago depot
house1 - The first house to build
house2 - The second house to build
house3 - The third house to build
jamie - administrator: The administrator Jamie
emma - general_worker: The first worker, Emma
bob - general_worker: The second worker, Bob

#### Initial State
(at truck1 chicago_depot): the truck is at the chicago_depot
(at jamie chicago_depot): Jamie is at the depot
(at emma chicago_depot): Emma is at the depot
(connected house1 chicago_depot): house1 is connected to the chicago_depot
(connected house2 chicago_depot): house2 is connected to the chicago_depot
(connected house3 chicago_depot): house3 is connected to the chicago_depot

#### Goal State
```
(AND ; all the following should be done
   (AND ; all the houses should be done
      (finalized house1) ; house 1 is done
      (finalized house2) ; house 2 is done
      (finalized house3) ; house 3 is done
   )
   (at truck1 chicago_depot); the truck is returned
)
```

### Feedback
1. Are any necessary objects missing?
    The description states that there are "a couple of trucks". This entails that at least two trucks exist, but only one is defined. At least one more should be added. Therefore: Yes. 

2. Are any unnecessary objects included?
    All the objects which are included are actually described and needed. So: No.

3. Are any objects defined with the wrong type?
    The "house" type is supposed to be used for what is being constructed, the houses built. However, "chicago_depot" is cleraly not being built by us, but is defined as a "house". It should be just a general location. Thereby: Yes.

4. Are any needed or expected predicates missing from the initial state?
    Naturally, everything needs a starting location and most of the objects are assumed to start at the chicago_depot, which makes sense. However, "bob" lacks a starting position. Furthermore, some predicates (connected) should be made symmetrical, see below. Hence: Yes.

5. Are any unnecessary or incorrect predicates declared?
    All the predicates which are initiated are valid and needed. As such: No. 

6. Is anything missing from the goal state?
    What is requested is, implicitly, that all the houses be finalized. This is checked, so: No.

7. Is anything unnecessary included in the goal description?
    The wanted position of the truck is not specified and isn't needed for the task to be considered to be completed. This should be removed. Hence: Yes.

8. Should any predicate be used in a symmetrical manner?
    The "connected" predicate clearly specifies that travel is possible in both directions, which means that (connected A B) should entail (connected B A).
    Therefore, each "connected" predicate should be mirrored to clarify that they're connected in both directions. This makes the PDDL more robust.
    Even though this could have been handled by the actions, we can't guarantee that it is and as such we have to mirror all these predicates.
    Thereby: Yes.

My concrete suggestions are the following:
    - Add a second truck ("truck2"). Initialize it with the following:
        - (at truck2 chicago_depot)
    - The "chicago_depot" is incorrectly modelled as a "house". It should instead be a "location". Correct this:
        - chicago_depot - location
    - The starting location for "bob" is missing. Add this in with the following predicate:
        - (at bob chicago_depot)
    - Remove the requirement for truck1:s location in the goal. This results in the following goal:
        ```
        (AND ; all the houses should be done
            (finalized house1) ; house 1 is done
            (finalized house2) ; house 2 is done
            (finalized house3) ; house 3 is done
        )
        ```
    - Make sure that the "connected" predicates are all used symmetrically. For this, you need to include all the following in the initial state:
        - (connected house1 chicago_depot): house1 is connected to the chicago_depot
        - (connected chicago_depot house1): chicago_depot is connected to house1
        - (connected house2 chicago_depot): house2 is connected to the chicago_depot
        - (connected chicago_depot house2): chicago_depot is connected to house2
        - (connected house3 chicago_depot): house3 is connected to the chicago_depot
        - (connected chicago_depot house3): chicago_depot is connected to house3

## Example 2
### Domain
In this domain, the AI agent is a wildlife conservation management system. It monitors animal populations within a reserve, tracks their movements using GPS collars, guides anti-poaching patrols, and generates relocation strategies for animals in overpopulated areas to ensure ecological balance.

There are four habitats currently, one centered and three around it. The surrounding ones contain our deers. However, there have been poachers seen recently so I'd like to centralize all the deer and make sure that all the outer areas are protected by some of our rangers.

### Types
- object: Object is always root, everything is an object
    - location: Places which can be travelled between.
        - habitat: Habitats are a type of location.
    - animal: The animals living in the park.
    - ranger: A worker protecting the animals.

### Predicates
The following are the available predicates which can be used:
1. (at ?o - object ?l - location): true if the object ?o (animal or ranger) is at the location ?l
2. (guarding ?r - ranger): true if the ranger ?r is guarding its current location
3. (guaded ?l - location): true if the location ?l is guarded by any ranger

### State
This is the state to give feedback on based on the domain and predicates above.

#### Objects
outer1 - habitat: The first outer habitat
outer2 - habitat: The second outer habitat
outer3 - habitat: The third outer habitat
outer4 - habitat: The fourth outer habitat
center - habitat: The central habitat
base - location: The location where the rangers currently are
deer1 - animal: The animal living in outer1
deer2 - animal: The animal living in outer2
deer3 - animal: The animal living in outer3
deer4 - animal: The animal living in outer4
ranger1 - ranger: One of the available rangers
ranger2 - ranger: One of the available rangers

#### Initial state
(at deer1 outer1)
(at deer2 outer2)
(at deer3 outer3)
(at deer4 outer4)
(at ranger1 base)
(at ranger2 base)
(protected base)

#### Goal State
```
(AND ; all the following should be done
    (AND ; all the deer should be centered
        (at deer1 center) ; deer1 is at center
        (at deer2 center) ; deer2 is at center
        (at deer3 center) ; deer3 is at center
        (at deer4 center) ; deer4 is at center
    )
    (AND ; all the outer locations should be protected
        (protected outer1) ; outer1 is protected
        (protected outer2) ; outer2 is protected
        (protected outer3) ; outer3 is protected
        (protected outer4) ; outer4 is protected
    )
)
```

### Feedback
1. Are any necessary objects missing?
    The description doesn't explicitly state how many rangers are available. However, looking at the predicates it's clear that a ranger can only protect a single location at a time. 
    Since there are three locations to protect (specified by the domain, a fourth has been incorrectly added, see below) we evidently need at least three rangers. This has to be added. Hence: Yes.

2. Are any unnecessary objects included?
    There are only three outer domains described in the domain, but there are four "outerX" locations. Clearly, one too much has been added. Connected to this, there is also a deer ("deer4") too much.
    Both the "deer4" and "outer4" objects should be removed from the domain. The "base" location is likely added since the start for rangers is unclear, so placing them somewhere is needed. This should probably be kept.
    Thereby: Yes.

3. Are any objects defined with the wrong type?
    All the deer are correctly animals and the rangers are rangers. Furthermore, "base" has been correctly modelled as a raw "loction" instead of a "habitat" which ought to be correct. So: No.  

4. Are any needed or expected predicates missing from the initial state?
    All the predicates which are needed (where everything starts) are specified, so: No.

5. Are any unnecessary or incorrect predicates declared?
    It's specified that "base" is protected. While this is perhaps a reasonable assumption the domain then also requires a ranger to be there guarding it, and no one is set to be guarding. Furthermore, guarding the base isn't requested. Therefore, this should probably be removed and as such: Yes.

6. Is anything missing from the goal state?
    The request is to move the deers, which is checked, and to guard the outer locations, which is checked. Hence: No.

7. Is anything unnecessary included in the goal description?
    Since "outer4" and "deer4" are removed from the domain, they also need to be removed from the goal. So, with that perspective: Yes.

8. Should any predicate be used in a symmetrical manner?
    While the "at" predicate could accept two locations, this is clearly not the intent. Hence: No.

My concrete suggestions are the following:
    - Remove the "deer4" and "outer4" objects from the domain entirely. They're incorrectly included.
    - Add at least one more ranger object. For example, "ranger3" could be added an initalized like this:
        - (at ranger3 base)
    - Remove the specification that base is protected ("(protected base)").
    - The updated goal state with outer4 and deer4 removed should be:
        ```
        (AND ; all the following should be done
            (AND ; all the deer should be centered
                (at deer1 center) ; deer1 is at center
                (at deer2 center) ; deer2 is at center
                (at deer3 center) ; deer3 is at center
            )
            (AND ; all the outer locations should be protected
                (protected outer1) ; outer1 is protected
                (protected outer2) ; outer2 is protected
                (protected outer3) ; outer3 is protected
            )
        )
        ```

## Example 3
### Domain
I've got a building with five floors and two elevators, and I want you to plan the elevator trips for Bob and Sally to both go to floor 5 in a climate friendly way.

### Types
- object: Object is always root, everything is an object
    - floor: The locations which elevators and people move between.
    - elevator: These move between floors and can carry people.
    - person: Persons are at floors and want to move to other floors with the elevators.

### Predicates
The following are the available predicates which can be used:
1. (at ?o - object ?f - floor): true if the object ?o (floor or elevator) is at the floor ?f
2. (in ?p - person ?e - elevator): true if the person ?p is in the elevator ?e

### State
This is the state to give feedback on based on the domain and predicates above.

#### Objects
bob - person: One of the two people who should meet. His exact floor is unknown.
sally - person: The other person who should meet. Her exact floor is unknown.
floor_bob - floor: The floor bob is on. Which (1-5) this is we don't know, so model generally.
floor_sally - floor: The floor sally is on. Which (1-5) this is we don't know, so model generally.
floor_5 - floor: The floor they should meet up at.
elevator_1 - elevator: The first elevator in the building.
elevator_2 - elevator: The second elevator in the building.

#### Initial State
(at bob floor_bob)
(at sally floor_sally)
(at elevator_1 floor_5)
(at elevator_2 floor_5)

#### Goal State
```
(AND ; all the following should be done
    (at bob floor_5) ; bob is at floor 5
    (at sally floor_5) ; sally is at floor 5
)
```

### Feedback
1. Are any necessary objects missing?
    The two elevators and two people are both included. While only three floors are included, the rest won't be needed for this task. So: No.

2. Are any unnecessary objects included?
    All the provided objects are necessary. Hence: No.

3. Are any objects defined with the wrong type?
    The people are all defined as people, the floors as floors and the elevators as elevators. All correct. Therefore: No.

4. Are any needed or expected predicates missing from the initial state?
    All the predicates which are needed (where everything starts) are specified, so: No.

5. Are any unnecessary or incorrect predicates declared?
    The only things initialized are the locations, which clearly all have to be defined. Thereby: No.

6. Is anything missing from the goal state?
    We check that both Sally and Bob are at the fifth floor, which was what was requested. So: No.

7. Is anything unnecessary included in the goal description?
    The only thing we check is that they meet. Therefore: No.

8. Should any predicate be used in a symmetrical manner?
    All the predicates are clearly intended to be one-directional, and that is how they're used. So: No.

Based on this, the response is: No feedback.

# Task

## Domain
{domain_desc}

## Available Types
{type_hierarchy}

## Predicates
The following are the available predicates which can be used:
{predicate_list}

## State
This is the state to give feedback on based on the domain and predicates above.

### Objects
{objects}

### Initial State
{state}

### Goal State
{goal}

## Feedback